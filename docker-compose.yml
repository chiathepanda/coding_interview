services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: "${DOCKER_REPO_ACCOUNT_NAME}/coding_interview-backend:latest"
    command: >
      sh -c "./docker.sh"
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_DJANGO_ALLOWED_HOSTS=${CORS_DJANGO_ALLOWED_HOSTS}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    # secrets:
    #   - mysql_ca_cert
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - project-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: "${DOCKER_REPO_ACCOUNT_NAME}/coding_interview-client:latest"
    stdin_open: true
    tty: true
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./client:/app
      - node_modules:/app/node_modules
    working_dir: /app
    command: npm start
    networks:
      - project-network

  db:
    image: mysql:8.0.39
    env_file:
      - .env
    # secrets:
    #   - mysql_ca_cert
    #   - mysql_server_cert
    #   - mysql_server_key
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - project-network

# secrets:
#   mysql_ca_cert:
#     external: true
#   mysql_server_cert:
#     external: true 
#   mysql_server_key:
#     external: true

volumes:
  mysql_data:
  node_modules:

networks:
  project-network:
    driver: bridge # ssl/tls is overlay, otherwise should change to bridge
    